openapi: 3.0.0
info:
  title: Plants-API
  description: "# \U0001F680 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## \U0001F516 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## \U0001F4AA Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## \U0001F4A1Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)"
  contact: {}
  version: '1.0'
servers:
- url: https://xeniya-dob-plants-nursery-store.onrender.com/api/v1
  variables: {}
paths:
  /auth/register:
    post:
      tags:
      - Auth
      summary: Register user
      description: >-
        This is a GET request and it is used to "get" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.
      operationId: Registeruser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RegisteruserRequest'
              - example:
                  name: peter
                  email: peter2@gmail.com
                  password: secret
            example:
              name: peter
              email: peter2@gmail.com
              password: secret
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
      - Auth
      summary: Login user
      description: >-
        This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.


        A successful POST request typically returns a `200 OK` or `201 Created` response code.
      operationId: Loginuser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/LoginuserRequest'
              - example:
                  email: bob@gmail.com
                  password: secret
            example:
              email: bob@gmail.com
              password: secret
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /items:
    post:
      tags:
      - Private
      summary: Create a plant item
      operationId: Createaplantitem
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateaplantitemRequest'
              - example:
                  name: Magnolia
                  price: 13
                  type: trees
                  description: Magnolias are spreading evergreen or deciduous trees or shrubs characterised by large fragrant flowers, which may be bowl-shaped or star-shaped, in shades of white, pink, purple, green, or yellow.
            example:
              name: Magnolia
              price: 13
              type: trees
              description: Magnolias are spreading evergreen or deciduous trees or shrubs characterised by large fragrant flowers, which may be bowl-shaped or star-shaped, in shades of white, pink, purple, green, or yellow.
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    get:
      tags:
      - Public
      summary: Get all plants
      operationId: Getallplants
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /items/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The item ID
    patch:
      tags:
      - Private
      summary: Update a plant
      operationId: Updateaplant
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdateaplantRequest'
              - example:
                  name: Red Apple
                  price: 11
                  description: Red
            example:
              name: Red Apple
              price: 11
              description: Red
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    get:
      tags:
      - Public
      summary: Get a plant
      operationId: Getaplant
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /items/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The item ID
    delete:
      tags:
      - Private
      summary: Delete a plant
      operationId: Deleteaplant
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /cart:
    post:
      tags:
      - Private
      summary: Add to cart
      operationId: Addtocart
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/AddtocartRequest'
              - example:
                  itemId: 665a006fd3a122fcb165495a
            example:
              itemId: 665a006fd3a122fcb165495a
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    get:
      tags:
      - Private
      summary: GET all Cart Items
      operationId: GETallCartItems
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
components:
  schemas:
    RegisteruserRequest:
      title: RegisteruserRequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: peter
        email: peter2@gmail.com
        password: secret
    LoginuserRequest:
      title: LoginuserRequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: bob@gmail.com
        password: secret
    CreateaplantitemRequest:
      title: CreateaplantitemRequest
      required:
      - name
      - price
      - type
      - description
      type: object
      properties:
        name:
          type: string
        price:
          type: integer
          format: int32
        type:
          type: string
        description:
          type: string
      example:
        name: Magnolia
        price: 13
        type: trees
        description: Magnolias are spreading evergreen or deciduous trees or shrubs characterised by large fragrant flowers, which may be bowl-shaped or star-shaped, in shades of white, pink, purple, green, or yellow.
    UpdateaplantRequest:
      title: UpdateaplantRequest
      required:
      - name
      - price
      - description
      type: object
      properties:
        name:
          type: string
        price:
          type: integer
          format: int32
        description:
          type: string
      example:
        name: Red Apple
        price: 11
        description: Red
    AddtocartRequest:
      title: AddtocartRequest
      required:
      - itemId
      type: object
      properties:
        itemId:
          type: string
      example:
        itemId: 665a006fd3a122fcb165495a
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:

- name: Auth
  description: ''
- name: Private
  description: ''
- name: Public
  description: ''